import { Injectable } from '@angular/core';
import { Http } from '@angular/http';

@Injectable()
export class StockDataService {

    constructor(private http: Http) { }

    getPricesList(codeNumber) {

        return new Promise((resolve, reject) => {

            const pricesListList = new Object();

            this.http.get(`https://dosj4jgzqe.execute-api.ap-northeast-1.amazonaws.com/stage1`)
                .subscribe((resp) => {
                    console.log('ファイル一覧取得完了');
                    console.log(resp.json());

                    var codeCount = 0;
                    var bunkatu = [];
                    for (var i = 0; i < resp.json().length; i++) {
                        const result = readTextFile('https://s3-ap-northeast-1.amazonaws.com/ev-checker-data/' + resp.json()[i]);
                        if (result) {

                            for (var j = 0; j < result.prices.length; j++) {
                                const strDate = result.prices[j].date.split('-');
                                result.prices[j].date = new Date(strDate[0], strDate[1] - 1, strDate[2], 15);
                                result.prices[j].us = calcUpperShadow(result.prices[j].open, result.prices[j].high, result.prices[j].low, result.prices[j].close);
                                result.prices[j].ls = calcLowerShadow(result.prices[j].open, result.prices[j].high, result.prices[j].low, result.prices[j].close);
                                // 足の種類。ちょっと珍しいかもだけどイメージしやすいように1,0,-1で区別(1:陽線 0:ぺったんこ -1:陰線)
                                if ((result.prices[j].close - result.prices[j].open) > 0) {
                                    // 終値が始値より大きければ陽線
                                    result.prices[j].barType = 1;
                                } else if ((result.prices[j].close - result.prices[j].open) < 0) {
                                    // 終値が始値より小さければ陰線
                                    result.prices[j].barType = -1;
                                } else {
                                    // どっちでもなければぺったんこ
                                    result.prices[j].barType = 0;
                                }
                            }


                            const isDataNormal = checkDataNormal(result);
                            if (!isDataNormal) {
                                console.log('異常なデータを検出');
                                continue;
                            }

                            /*
                            過去に分割されたことがあるかどうかを調べる。
                            分割されてるっぽかったら、スルーしてサンプルから除外する。
                            これは一時的な応急処置であり、そのうちちゃんと直したい。
                            とは言っても分割に関する処理は本当に難しい。。
                            */
                            if (result.prices.length > 0) {
                                var priceBeforeOneDay = result.prices[0].open;
                                var bunkatuFlag = false;
                                for (var j = 1; j < result.prices.length; j++) {
                                    // １日で始値が倍以上、または半分以下になっていた場合、分割と判断
                                    if (result.prices[j].open >= priceBeforeOneDay * 2
                                        || result.prices[j].open <= priceBeforeOneDay / 2) {
                                        bunkatuFlag = true;
                                    }

                                    priceBeforeOneDay = result.prices[j].open;
                                }

                                if (bunkatuFlag) {
                                    console.log('分割が見つかったのでスルーします');
                                    bunkatu.push(result.code);
                                    continue;
                                }
                            }


                            result.prices.reverse();

                            pricesListList[codeCount + ''] = result;
                            console.log(result);
                            codeCount++;
                        } else {
                        }

                        if (i >= codeNumber - 1) {
                            break;
                        }
                    }
                    console.log('get complete');
                    console.log(pricesListList);
                    resolve(pricesListList);
                });

            /**
            * ネットから拾ってきたファイル読み込むための関数
            * @param {string} 読み込みたいファイルのパス(URL)
            */
            function readTextFile(url) {

                var rawFile = new XMLHttpRequest();
                rawFile.open("GET", url, false);
                rawFile.send(null);
                try {
                    const resultJson = JSON.parse(rawFile.responseText);
                    return resultJson;
                } catch (e) {
                }

            }

            /**
            * 上ヒゲの長さを計算する(株価全体に対するパーセンテージ)
            * @param {number} open 
            * @param {number} high 
            * @param {number} low 
            * @param {number} close 
            */
            function calcUpperShadow(open, high, low, close) {
                var upperShadowLength = high - Math.max(open, close);
                if (upperShadowLength == 0) {
                    return 0;
                }
                var upperShadowPercentForAll = (upperShadowLength / high) * 100;

                return upperShadowPercentForAll;
            }

            /**
             * 下ヒゲの長さを計算する(株価全体に対するパーセンテージ)
             * @param {number} open 
             * @param {number} high 
             * @param {number} low 
             * @param {number} close 
             */
            function calcLowerShadow(open, high, low, close) {
                var lowerShadowLength = Math.min(open, close) - low;
                if (lowerShadowLength == 0) {
                    return 0;
                }
                var lowerShadowPercentForAll = (lowerShadowLength / high) * 100;

                return lowerShadowPercentForAll;
            }

            /**
            * 異常なデータを検出する。
            * わざわざ関数作った理由は、関数作らずに普通に書くとまたbreakFlag的なbreakしたことを表すフラグを用意しないといけなくなり
            * なんかダサかったので、普通じゃないやり方かもしれないけど関数にすることでreturnでいい感じにした。
            */
            function checkDataNormal(result) {
                for (var j = 0; j < result.prices.length; j++) {
                    const prices = result.prices[j];
                    if (prices.open <= 0 || prices.high <= 0 || prices.low <= 0 || prices.close <= 0
                        || prices.us < 0 || prices.ls < 0 || prices.barType <= -2 || prices.barType >= 2) {
                        // ここ、本来はbreakFlagをtrueにしてbreakしたりしなきゃいけなかった。関数にすることでスマートになった。気がする。
                        return false;
                    }
                }
                return true;
            }

        });

    }

}